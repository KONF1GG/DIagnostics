import React from "react";
import "./ChatMessages.css";
import { copyToClipboard } from "../../../utils/copyUtils";

interface ChatMessagesProps {
  messages: any[];
  isLoading: boolean;
  selectedAddress: any;
  addressTariffs: any;
  isLoadingTariffs: boolean;
  tariffsError: string | null;
  inlineQuery: string;
  addressResults: any[];
  addressError: string | null;
  chatMode: "wiki" | "tariffSearch" | "tariffChat";
  onAddressSelect: (address: any) => void;
  onCopyCommand: (command: string) => void;
  onShowCopyNotification: (text: string) => void;
  messagesEndRef: React.RefObject<HTMLDivElement>;
  searchResultsRef?: React.RefObject<HTMLDivElement>;
}

const ChatMessages: React.FC<ChatMessagesProps> = ({
  messages,
  isLoading,
  selectedAddress,
  addressTariffs,
  isLoadingTariffs,
  tariffsError,
  inlineQuery,
  addressResults,
  addressError,
  chatMode,
  onAddressSelect,
  onCopyCommand,
  onShowCopyNotification,
  messagesEndRef,
  searchResultsRef,
}) => (
  <div className="chat-messages adaptive-scroll">
    {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ */}
    {messages.length === 0 &&
      chatMode === "tariffChat" &&
      selectedAddress &&
      addressTariffs && (
        <div className="info-panel fixed">
          <div className="info-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
              <path
                d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <circle cx="12" cy="12" r="2" fill="currentColor" />
            </svg>
          </div>
          <h3>–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∞–∫—Ç–∏–≤–µ–Ω</h3>
          <div className="description-content">
            <p>
              –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è
              —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ <strong>{selectedAddress.territory_name}</strong>.
              –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö, –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏
              –¥—Ä—É–≥–∏—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
            </p>
            <p className="note">
              üí° –ü–æ–∏—Å–∫ –ø–æ Wiki –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫
              –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É –æ—á–∏—Å—Ç–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.
            </p>
            <div className="description-steps">
              <div className="step">
                <span className="step-number">1</span>
                <span className="step-text">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å</span>
              </div>
              <div className="step">
                <span className="step-number">2</span>
                <span className="step-text">–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º</span>
              </div>
              <div className="step">
                <span className="step-number">3</span>
                <span className="step-text">–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏</span>
              </div>
            </div>
          </div>
        </div>
      )}
    {selectedAddress && isLoadingTariffs && (
      <div className="loading-tariffs-description fixed">
        <div className="loading-header">
          <div className="loading-spinner">
            <div className="loader-small"></div>
          </div>
          <h4>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤</h4>
        </div>
        <p>
          –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏{" "}
          <strong>{selectedAddress.territory_name}</strong>...
        </p>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</p>
      </div>
    )}
    {selectedAddress && tariffsError && (
      <div className="tariffs-error-compact">
        <div className="error-content">
          <div className="error-icon-small">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="2"
              />
              <line
                x1="12"
                y1="8"
                x2="12"
                y2="12"
                stroke="currentColor"
                strokeWidth="2"
              />
              <line
                x1="12"
                y1="16"
                x2="12.01"
                y2="16"
                stroke="currentColor"
                strokeWidth="2"
              />
            </svg>
          </div>
          <div className="error-text">
            <span className="error-title">
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è {selectedAddress.territory_name}
            </span>
            <span className="error-subtitle">
              –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            </span>
          </div>
        </div>
        <button
          className="retry-button-small"
          onClick={() => window.location.reload()}
          title="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"
        >
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
            <path
              d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M21 3v5h-5"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M3 21v-5h5"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        </button>
      </div>
    )}
    {/* –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ Wiki */}
    {messages.length === 0 && chatMode === "wiki" && (
      <div className="info-panel fixed">
        <div className="info-icon">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
            <path
              d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <circle
              cx="12"
              cy="8"
              r="2"
              stroke="currentColor"
              strokeWidth="1.5"
            />
            <path
              d="M9 14h6"
              stroke="currentColor"
              strokeWidth="1.5"
              strokeLinecap="round"
            />
          </svg>
        </div>
        <h3>–ü–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π Wiki</h3>
        <div className="description-content">
          <p>
            –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö
            –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
          </p>
          <p>
            –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É
            "–ü–æ–∏—Å–∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É{" "}
            <span
              className="copyable-command"
              onClick={() => onCopyCommand("/tariff")}
              title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
            >
              /tariff
            </span>
          </p>
          <div className="description-steps">
            <div className="step">
              <span className="step-number">1</span>
              <span className="step-text">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å</span>
            </div>
            <div className="step">
              <span className="step-number">2</span>
              <span className="step-text">–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ Wiki</span>
            </div>
            <div className="step">
              <span className="step-number">3</span>
              <span className="step-text">–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏</span>
            </div>
          </div>
        </div>
      </div>
    )}
    {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ */}
    {messages.length === 0 && chatMode === "tariffSearch" && (
      <div className="info-panel fixed">
        <div className="info-icon">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
            <path
              d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <circle
              cx="12"
              cy="10"
              r="3"
              stroke="currentColor"
              strokeWidth="2"
            />
          </svg>
        </div>
        <h3>–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏</h3>
        <div className="description-content">
          <p>
            –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç
            –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞.
          </p>
          <p>
            –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏
            —É—Å–ª—É–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ
            –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –∏ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏
            —É—Å–ª–æ–≤–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
          </p>
          <div className="description-steps">
            <div className="step">
              <span className="step-number">1</span>
              <span className="step-text">–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é</span>
            </div>
            <div className="step">
              <span className="step-number">2</span>
              <span className="step-text">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞</span>
            </div>
            <div className="step">
              <span className="step-number">3</span>
              <span className="step-text">–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–∞—Ä–∏—Ñ–∞—Ö</span>
            </div>
          </div>
        </div>
      </div>
    )}

    {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ */}
    {chatMode === "tariffSearch" && (
      <div className="search-results-panel" ref={searchResultsRef}>
        <div className="search-results-header">
          <h4>
            {inlineQuery
              ? `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${inlineQuery}"`
              : "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –∞–∫—Ç–∏–≤–µ–Ω"}
          </h4>
        </div>

        {!inlineQuery && (
          <div className="search-hint">
            <p>üí° –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}

        {inlineQuery && inlineQuery.length < 3 && (
          <div className="search-hint">
            <p>
              ‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –µ—â–µ {3 - inlineQuery.length} —Å–∏–º–≤–æ–ª(–∞) –¥–ª—è –Ω–∞—á–∞–ª–∞
              –ø–æ–∏—Å–∫–∞
            </p>
          </div>
        )}

        {addressError && (
          <div className="search-error">
            <div className="error-header">
              <div className="error-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="2"
                  />
                  <line
                    x1="12"
                    y1="8"
                    x2="12"
                    y2="12"
                    stroke="currentColor"
                    strokeWidth="2"
                  />
                  <line
                    x1="12"
                    y1="16"
                    x2="12.01"
                    y2="16"
                    stroke="currentColor"
                    strokeWidth="2"
                  />
                </svg>
              </div>
              <h5>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</h5>
            </div>
            <p>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.</p>
          </div>
        )}

        {inlineQuery &&
          inlineQuery.length >= 3 &&
          addressResults.length > 0 && (
            <div className="address-results">
              {addressResults.map((address, index) => (
                <div
                  key={index}
                  className="address-result-item"
                  onClick={() => onAddressSelect(address)}
                >
                  <div className="address-main">
                    <span className="territory-name-main">
                      {address.territory_name}
                    </span>
                    <span className="address-text">{address.address}</span>
                  </div>
                  <div className="address-details">
                    {address.territory_id && (
                      <span className="territory-id">
                        ID: {address.territory_id}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}

        {inlineQuery &&
          inlineQuery.length >= 3 &&
          addressResults.length === 0 &&
          !addressError && (
            <div className="no-results">
              <p>üîç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{inlineQuery}"</p>
              <p>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
              </p>
            </div>
          )}
      </div>
    )}

    {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
    {messages.map((msg) => (
      <div
        key={msg.id}
        className={`message-container ${msg.isUser ? "user" : "bot"}`}
      >
        <div className={`message ${msg.isUser ? "user" : "bot"}`}>
          {msg.isUser ? (
            <div className="message-text">{msg.text}</div>
          ) : (
            <div
              className="message-text"
              dangerouslySetInnerHTML={{ __html: msg.text }}
            />
          )}
        </div>
        {!msg.isUser && (
          <button
            className="copy-message-btn"
            onClick={async () => {
              const textContent = msg.text.replace(/<[^>]*>/g, ""); // Remove HTML tags
              const success = await copyToClipboard(textContent);
              if (success) {
                onShowCopyNotification("–û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! üìã");
              } else {
                onShowCopyNotification(
                  "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é."
                );
              }
            }}
            title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
          >
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
              <rect
                x="9"
                y="9"
                width="13"
                height="13"
                rx="2"
                ry="2"
                stroke="currentColor"
                strokeWidth="2"
                fill="none"
              />
              <path
                d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
                stroke="currentColor"
                strokeWidth="2"
                fill="none"
              />
            </svg>
          </button>
        )}
      </div>
    ))}
    {isLoading && (
      <div className="message-container bot">
        <div className="message bot loading">
          <div className="loader"></div>
          <span>–ò—â—É –æ—Ç–≤–µ—Ç...</span>
        </div>
      </div>
    )}
    <div ref={messagesEndRef} />
  </div>
);

export default ChatMessages;
